
PROJECT1_DIEUHOA.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ee  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000142  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000142  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000174  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000001b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000072c  00000000  00000000  000001e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000061a  00000000  00000000  0000090c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002c9  00000000  00000000  00000f26  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  000011f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000372  00000000  00000000  00001234  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000d8  00000000  00000000  000015a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  0000167e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 3e 00 	call	0x7c	; 0x7c <main>
  64:	0c 94 75 00 	jmp	0xea	; 0xea <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <_Z4sendh>:
#include <avr/sfr_defs.h>
#include <avr/interrupt.h>

void send( unsigned char c )
{
	while (bit_is_clear(UCSRA,UDRE));
  6c:	5d 9b       	sbis	0x0b, 5	; 11
  6e:	fe cf       	rjmp	.-4      	; 0x6c <_Z4sendh>
	UDR = c;
  70:	8c b9       	out	0x0c, r24	; 12
  72:	08 95       	ret

00000074 <_Z7receivev>:
}
unsigned char receive()
{
	while(bit_is_clear(UCSRA,RXC));
  74:	5f 9b       	sbis	0x0b, 7	; 11
  76:	fe cf       	rjmp	.-4      	; 0x74 <_Z7receivev>
	return UDR;
  78:	8c b1       	in	r24, 0x0c	; 12
}
  7a:	08 95       	ret

0000007c <main>:


int main(void)
{
  
   DDRA = 0b00000011;
  7c:	83 e0       	ldi	r24, 0x03	; 3
  7e:	8a bb       	out	0x1a, r24	; 26
   PORTA = 0b00000000;
  80:	1b ba       	out	0x1b, r1	; 27
   UBRRL = 51;
  82:	83 e3       	ldi	r24, 0x33	; 51
  84:	89 b9       	out	0x09, r24	; 9
   UCSRC = (1<<UCSZ1)|(1<<UCSZ0);
  86:	86 e0       	ldi	r24, 0x06	; 6
  88:	80 bd       	out	0x20, r24	; 32
   UCSRB = (1<<RXEN)|(1<<TXEN)|(1<<RXCIE); 
  8a:	88 e9       	ldi	r24, 0x98	; 152
  8c:	8a b9       	out	0x0a, r24	; 10
    while (1) 
    {
		send('5');
  8e:	85 e3       	ldi	r24, 0x35	; 53
  90:	0e 94 36 00 	call	0x6c	; 0x6c <_Z4sendh>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  94:	2f ef       	ldi	r18, 0xFF	; 255
  96:	89 e6       	ldi	r24, 0x69	; 105
  98:	98 e1       	ldi	r25, 0x18	; 24
  9a:	21 50       	subi	r18, 0x01	; 1
  9c:	80 40       	sbci	r24, 0x00	; 0
  9e:	90 40       	sbci	r25, 0x00	; 0
  a0:	e1 f7       	brne	.-8      	; 0x9a <main+0x1e>
  a2:	00 c0       	rjmp	.+0      	; 0xa4 <main+0x28>
  a4:	00 00       	nop
		_delay_ms(1000);
		if (receive()=='1') {
  a6:	0e 94 3a 00 	call	0x74	; 0x74 <_Z7receivev>
  aa:	81 33       	cpi	r24, 0x31	; 49
  ac:	61 f4       	brne	.+24     	; 0xc6 <main+0x4a>
			PORTA = 0x01;
  ae:	81 e0       	ldi	r24, 0x01	; 1
  b0:	8b bb       	out	0x1b, r24	; 27
  b2:	2f ef       	ldi	r18, 0xFF	; 255
  b4:	89 e6       	ldi	r24, 0x69	; 105
  b6:	98 e1       	ldi	r25, 0x18	; 24
  b8:	21 50       	subi	r18, 0x01	; 1
  ba:	80 40       	sbci	r24, 0x00	; 0
  bc:	90 40       	sbci	r25, 0x00	; 0
  be:	e1 f7       	brne	.-8      	; 0xb8 <main+0x3c>
  c0:	00 c0       	rjmp	.+0      	; 0xc2 <main+0x46>
  c2:	00 00       	nop
  c4:	0f c0       	rjmp	.+30     	; 0xe4 <main+0x68>
			_delay_ms(1000);
		}
		else if (receive()=='2')
  c6:	0e 94 3a 00 	call	0x74	; 0x74 <_Z7receivev>
  ca:	82 33       	cpi	r24, 0x32	; 50
  cc:	59 f4       	brne	.+22     	; 0xe4 <main+0x68>
		{
			PORTA=0b00000010;
  ce:	82 e0       	ldi	r24, 0x02	; 2
  d0:	8b bb       	out	0x1b, r24	; 27
  d2:	2f ef       	ldi	r18, 0xFF	; 255
  d4:	89 e6       	ldi	r24, 0x69	; 105
  d6:	98 e1       	ldi	r25, 0x18	; 24
  d8:	21 50       	subi	r18, 0x01	; 1
  da:	80 40       	sbci	r24, 0x00	; 0
  dc:	90 40       	sbci	r25, 0x00	; 0
  de:	e1 f7       	brne	.-8      	; 0xd8 <main+0x5c>
  e0:	00 c0       	rjmp	.+0      	; 0xe2 <main+0x66>
  e2:	00 00       	nop
			_delay_ms(1000);
		}
		PORTA=0x00;
  e4:	1b ba       	out	0x1b, r1	; 27
		UDR=0x00;
  e6:	1c b8       	out	0x0c, r1	; 12
   DDRA = 0b00000011;
   PORTA = 0b00000000;
   UBRRL = 51;
   UCSRC = (1<<UCSZ1)|(1<<UCSZ0);
   UCSRB = (1<<RXEN)|(1<<TXEN)|(1<<RXCIE); 
    while (1) 
  e8:	d2 cf       	rjmp	.-92     	; 0x8e <main+0x12>

000000ea <_exit>:
  ea:	f8 94       	cli

000000ec <__stop_program>:
  ec:	ff cf       	rjmp	.-2      	; 0xec <__stop_program>
